service: whatsapppush
frameworkVersion: "3"

custom:
  stage: ${opt:stage, self:provider.stage}
  templatesTableName: Templates
  notificationTableName: NotificationTask
  recipientS3BucketName: whatsapppush-recipient-file-storages-${self:custom.stage}
  sqsQueueName: WhatsAppMessageQueue

provider:
  name: aws
  profile: liranAtli
  region: eu-west-1
  runtime: nodejs18.x
  stage: dev
  versionFunctions: false # Lock the version of the functions
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"

        - Effect: Allow
          Action:
            - s3:*
          Resource:
            - "arn:aws:s3:::*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource: "arn:aws:sqs:${self:provider.region}:*:${self:custom.sqsQueueName}"

  environment:
    DDB_TEMPLATES_TABLE_NAME: ${self:custom.templatesTableName}
    DDB_NOTIFICATION_TASK_TABLE_NAME: ${self:custom.notificationTableName}
    RECIPIENT_S3_BUCKET_NAME: ${self:custom.recipientS3BucketName}
    SQS_QUEUE_NAME: ${self:custom.sqsQueueName}

functions:
  CreateTemplates:
    handler: handlers/template.create
    description: Create a new template
    events:
      - http:
          path: templates
          method: post
          cors: true
  UpdateTemplates:
    handler: handlers/template.update
    description: Edit a template
    events:
      - http:
          path: templates/{user_id}/{template_id}
          method: put
          cors: true
  DeleteTemplates:
    handler: handlers/template.delete
    description: Delete a template
    events:
      - http:
          path: templates/{user_id}/{template_id}
          method: delete
          cors: true
  DetailsTemplates:
    handler: handlers/template.details
    description: Read a template
    events:
      - http:
          path: templates/{user_id}/{template_id}
          method: get
          cors: true
  ListTemplates:
    handler: handlers/template.list
    description: Read a template
    events:
      - http:
          path: templates/{user_id}
          method: get
          cors: true
  GetSignedUrl:
    handler: handlers/upload-url.getSignedUrl
    description: Read a template
    events:
      - http:
          path: upload-url/{user_id}
          method: post
          cors: true
  CreateNotification:
    handler: handlers/notification.create
    description: Read a template
    events:
      - http:
          path: notification
          method: post
          cors: true

resources:
  Resources:
    RecipientFilesS3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.recipientS3BucketName}
    SqsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.sqsQueueName}
    NotificationTaskTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "NotificationTask"
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: "user_id"
            AttributeType: "S"
          - AttributeName: "notification_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "user_id"
            KeyType: "HASH" # Partition key
          - AttributeName: "notification_id"
            KeyType: "RANGE" # Sort key
